<?php
/**
 * @package		Joomla.Site
 * @subpackage	com_content
 * @copyright	Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */

// No direct access
defined('_JEXEC') or die;

// Base this model on the backend version.
require_once JPATH_ADMINISTRATOR.'/components/com_content/models/article.php';

/**
 * Content Component Article Model
 *
 * @package		Joomla.Site
 * @subpackage	com_content
 * @since 1.5
 */
class ContentModelForm extends ContentModelArticle
{
	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @since	1.6
	 */
	protected function populateState()
	{
		$app = JFactory::getApplication();

		// Load state from the request.
		$pk = JRequest::getInt('a_id');
		$this->setState('article.id', $pk);

		$this->setState('article.catid', JRequest::getInt('catid'));

		$return = JRequest::getVar('return', null, 'default', 'base64');
		$this->setState('return_page', urldecode(base64_decode($return)));

		// Load the parameters.
		$params	= $app->getParams();
		$this->setState('params', $params);

		$this->setState('layout', JRequest::getCmd('layout'));
	}

	/**
	 * Method to get article data.
	 *
	 * @param	integer	The id of the article.
	 *
	 * @return	mixed	Content item data object on success, false on failure.
	 */
	public function getItem($itemId = null)
	{
		// Initialise variables.
		$itemId = (int) (!empty($itemId)) ? $itemId : $this->getState('article.id');

		
		
		// Get a row instance.
		$table = $this->getTable();

		// Attempt to load the row.
		$return = $table->load($itemId);

		// Check for a table object error.
		if ($return === false && $table->getError()) {
			$this->setError($table->getError());
			return false;
		}

		$properties = $table->getProperties(1);
		$value = JArrayHelper::toObject($properties, 'JObject');

		// Convert attrib field to Registry.
		$value->params = new JRegistry;
		$value->params->loadString($value->attribs);

		// Compute selected asset permissions.
		$user	= JFactory::getUser();
		$userId	= $user->get('id');
		$asset	= 'com_content.article.'.$value->id;

		// Check general edit permission first.
		if ($user->authorise('core.edit', $asset)) {
			$value->params->set('access-edit', true);
		}
		// Now check if edit.own is available.
		elseif (!empty($userId) && $user->authorise('core.edit.own', $asset)) {
			// Check for a valid user and that they are the owner.
			if ($userId == $value->created_by) {
				$value->params->set('access-edit', true);
			}
		}

		// Check edit state permission.
		if ($itemId) {
			// Existing item
			$value->params->set('access-change', $user->authorise('core.edit.state', $asset));
		}
		else {
			// New item.
			$catId = (int) $this->getState('article.catid');

			if ($catId) {
				$value->params->set('access-change', $user->authorise('core.edit.state', 'com_content.category.'.$catId));
				$value->catid = $catId;
			}
			else {
				$value->params->set('access-change', $user->authorise('core.edit.state', 'com_content'));
			}
		}

		$value->articletext = $value->introtext;
		if (!empty($value->fulltext)) {
			$value->articletext .= '<hr id="system-readmore" />'.$value->fulltext;
		}

		return $value;
	}

	/**
	 * Get the return URL.
	 *
	 * @return	string	The return URL.
	 * @since	1.6
	 */
	public function getReturnPage()
	{
		return base64_encode(urlencode($this->getState('return_page')));
	}


    public function getTagsByText($text){

        $db = $this->getDbo();

        $query = "SELECT t.* FROM #__tags t ".
            "JOIN #__tags_texts tt ON (t.id = tt.tag_id) ".
            "WHERE t.name != '' AND tt.text_id=".mysql_real_escape_string($text->id);

        $db->setQuery($query);

        $tags = $db->loadObjectList();

        return $tags;
    }

	public function getImage($text){

        $db = $this->getDbo();

        $query = "SELECT ci.* FROM #__content_images ci WHERE ci.text_id=".mysql_real_escape_string($text->id)." LIMIT 1";

        $db->setQuery($query);

        $image = $db->loadObject();

        return $image;
    }
	

    public function getLastInsertedTextId(){

        $db = $this->getDbo();

        $query = "SELECT MAX(t.id) max_id FROM #__content t";

        $db->setQuery($query);

        $text = $db->loadObject();

        return $text->max_id;
    }

    public function addTag($tag_id, $tag_name, $text_id){
        $db = $this->getDbo();

        $lang =& JFactory::getLanguage();
        $lang_code = $lang->getTag();


        if($tag_id == "0"){
            $query = "INSERT INTO #__tags (name, language_id) VALUES ('".$tag_name."', (SELECT lang_id FROM #__languages WHERE lang_code='".$lang_code."'))";
            $db->setQuery($query);
            $db->query();
            $tag_id = $db->insertid();
        }
        $query = 'INSERT INTO #__tags_texts (tag_id, text_id) VALUES ('.(int) $tag_id.', '.(int) $text_id.')';

        $db->setQuery($query);
        $db->query();

        return $tag_id;
    }
}
